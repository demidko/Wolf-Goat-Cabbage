import java.util.*

/**
 * –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±—ã–º
 */
sealed class Person(private val name: String) {

  override fun toString() = name
}

object Farmer : Person("üë©üèª‚Äçüåæ")

object Wolf : Person("üê∫")

object Goat : Person("üêê")

object Cabbage : Person("ü•¨")

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏–º –±–µ—Ä–µ–≥ –∫–∞–∫ –Ω–∞–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 */
typealias Riverside = Set<Person>

/**
 * –û–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä–∞–≤–∏–ª–∞
 */
fun Riverside.isValid(): Boolean {
  if (contains(Farmer)) {
    return true
  }
  if (contains(Wolf) && contains(Goat)) {
    return false
  }
  if (contains(Goat) && contains(Cabbage)) {
    return false
  }
  return true
}

/**
 * –ö–≤–∞–Ω—Ç–æ–≤–∞—è –ª–æ–¥–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –±–µ—Ä–µ–≥–∞–º–∏
 */
sealed class QuantumBoat(val leftside: Riverside, val rightside: Riverside) {

  /**
   * –ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â–∏–π –±–µ—Ä–µ–≥ –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º—É
   * @return –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–¥–∫–∏
   */
  abstract fun invert(): List<QuantumBoat>
}

/**
 * –õ–æ–¥–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ª–µ–≤–∞
 */
class LeftBoat(leftside: Riverside, rightside: Riverside = emptySet()) : QuantumBoat(leftside, rightside) {

  override fun toString() = "(‚öìÔ∏è$leftside‚å¢$rightsideÔ∏è)"

  override fun invert() =
    leftside.map {
      RightBoat(leftside - it - Farmer, rightside + it + Farmer)
    } + RightBoat(leftside, rightside)
}

/**
 * –õ–æ–¥–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–ø—Ä–∞–≤–∞
 */
class RightBoat(leftside: Riverside = emptySet(), rightside: Riverside) : QuantumBoat(leftside, rightside) {

  override fun toString() = "(Ô∏è$leftside‚å¢$rightside‚öìÔ∏è)"

  override fun invert() =
    rightside.map {
      LeftBoat(leftside + it + Farmer, rightside - it - Farmer)
    } + LeftBoat(leftside, rightside)
}

/**
 * –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ–¥–∫–∏
 */
typealias History = LinkedList<QuantumBoat>

/**
 * @return –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–¥–∫–∏
 */
fun historyOf(new: QuantumBoat) = History().apply { add(new) }

/**
 * –†–∞–∑–≤–∏–ª–∫–∞ –º—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏–π –ª–æ–¥–∫–∏ –Ω–∞ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö
 */
@Suppress("UNCHECKED_CAST")
fun Sequence<History>.fork() = sequence {
  for (history in this@fork) {
    for (forked in history.last.invert()) {
      yield((history.clone() as History).apply {
        add(forked)
      })
    }
  }
}

/**
 * –•—Ä–æ–Ω–∏—Å—Ç –±—É–¥–µ—Ç –¥—É–º–∞—Ç—å –∑–∞ –Ω–∞—Å
 * @param boat –∫–≤–∞–Ω—Ç–æ–≤–∞—è –ª–æ–¥–∫–∞ —Ñ–µ—Ä–º–µ—Ä–∞
 */
class Chronicler(boat: QuantumBoat) {

  /**
   * –ú—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–∞—è –≤ –≥–æ–ª–æ–≤–µ —Ö—Ä–æ–Ω–∏—Å—Ç–∞
   */
  private var multiverse = sequenceOf(historyOf(boat))

  /**
   * –ü–æ–∏—Å–∫ –∂–µ–ª–∞–µ–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –º—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–æ–π
   * @param result –∂–µ–ª–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–µ–∏—Ö –±–µ—Ä–µ–≥–æ–≤
   */
  fun search(result: QuantumBoat.() -> Boolean) = multiverse.filter { it.last.result() }.toList()

  /**
   * –ü–ª—ã—Ç—å –ø–æ –º—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–æ–π –¥–∞–ª—å—à–µ
   * @param to –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
   */
  fun sail(): Chronicler {
    multiverse = multiverse.fork().filter {
      it.last.leftside.isValid() && it.last.rightside.isValid()
    }
    return this
  }
}

fun main() {
  val property = setOf(Wolf, Goat, Cabbage)
  val chronicler = Chronicler(LeftBoat(property))
  var multiverse = listOf<History>()
  while (multiverse.isEmpty()) {
    multiverse = chronicler.sail().search {
      rightside.containsAll(property)
    }
  }
  for (history in multiverse) {
    for (boat in history) {
      print("‚Üí $boat ")
    }
    println()
  }
}